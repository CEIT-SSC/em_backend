# Generated by Django 5.2.1 on 2025-07-23 00:11

import django.db.models.deletion
import events.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('excerpt', models.TextField(help_text='Short plain‚Äêtext summary shown in the feed')),
                ('body_markdown', models.TextField(help_text='Full post content in Markdown')),
                ('published_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-published_at'],
            },
        ),
        migrations.RemoveField(
            model_name='competitionteam',
            name='member_emails_snapshot',
        ),
        migrations.AddField(
            model_name='event',
            name='landing_url',
            field=models.URLField(blank=True, max_length=500, null=True, verbose_name='Page URL'),
        ),
        migrations.AddField(
            model_name='event',
            name='poster',
            field=models.ImageField(blank=True, null=True, upload_to='event_posters/%Y/%m/', verbose_name='Event Poster'),
        ),
        migrations.AddField(
            model_name='groupcompetition',
            name='allow_content_submission',
            field=models.BooleanField(default=False, verbose_name='Allow Teams to Submit Content?'),
        ),
        migrations.AddField(
            model_name='groupcompetition',
            name='poster',
            field=models.ImageField(blank=True, null=True, upload_to='competition_posters/%Y/%m/', verbose_name='Competition Poster'),
        ),
        migrations.AddField(
            model_name='solocompetition',
            name='poster',
            field=models.ImageField(blank=True, null=True, upload_to='competition_posters/%Y/%m/', verbose_name='Competition Poster'),
        ),
        migrations.AlterField(
            model_name='competitionteam',
            name='status',
            field=models.CharField(choices=[('pending_admin_verification', 'Pending Admin Verification'), ('rejected_by_admin', 'Rejected by Admin'), ('approved_awaiting_payment', 'Approved - Awaiting Payment'), ('in_cart', 'In Cart (Awaiting Checkout)'), ('awaiting_payment_confirmation', 'Awaiting Payment Confirmation'), ('payment_failed', 'Payment Failed'), ('active', 'Active'), ('cancelled', 'Cancelled')], default='in_cart', max_length=40, verbose_name='Team Status'),
        ),
        migrations.CreateModel(
            name='TeamContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='Content Description')),
                ('file_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='Link to External File/Repository')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='content_submission', to='events.competitionteam', verbose_name='Team')),
            ],
            options={
                'verbose_name': 'Team Content Submission',
                'verbose_name_plural': 'Team Content Submissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=events.models.team_content_image_path, verbose_name='Image')),
                ('caption', models.CharField(blank=True, max_length=255, null=True, verbose_name='Caption')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('team_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='events.teamcontent', verbose_name='Team Content')),
            ],
            options={
                'verbose_name': 'Content Image',
                'verbose_name_plural': 'Content Images',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Comment Text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_comments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('team_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='events.teamcontent', verbose_name='Commented Content')),
            ],
            options={
                'verbose_name': 'Content Comment',
                'verbose_name_plural': 'Content Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_likes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('team_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='events.teamcontent', verbose_name='Liked Content')),
            ],
            options={
                'verbose_name': 'Content Like',
                'verbose_name_plural': 'Content Likes',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'team_content')},
            },
        ),
    ]
