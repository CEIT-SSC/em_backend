# Generated by Django 5.2.1 on 2025-07-24 12:06

import django.db.models.deletion
import events.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=events.models.team_content_image_path, verbose_name='Image')),
                ('caption', models.CharField(blank=True, max_length=255, null=True, verbose_name='Caption')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Content Image',
                'verbose_name_plural': 'Content Images',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Event Title')),
                ('description', models.TextField(verbose_name='Event Description')),
                ('start_date', models.DateTimeField(verbose_name='Start Date & Time')),
                ('end_date', models.DateTimeField(verbose_name='End Date & Time')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is Event Active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='event_posters/%Y/%m/', verbose_name='Event Poster')),
                ('landing_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='Page URL')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('excerpt', models.TextField(help_text='Short plain‚Äêtext summary shown in the feed')),
                ('body_markdown', models.TextField(help_text='Full post content in Markdown')),
                ('published_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='PresentationEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending_payment', 'Pending Payment'), ('completed_or_free', 'Completed/Free'), ('payment_failed', 'Payment Failed'), ('cancelled', 'Cancelled')], default='pending_payment', max_length=20, verbose_name='Enrollment Status')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Presentation Enrollment',
                'verbose_name_plural': 'Presentation Enrollments',
            },
        ),
        migrations.CreateModel(
            name='Presenter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Public Contact Email')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biography')),
                ('presenter_picture', models.ImageField(blank=True, null=True, upload_to='presenter_pics/%Y/%m/', verbose_name='Presenter Picture')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Presenter',
                'verbose_name_plural': 'Presenters',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SoloCompetition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Competition Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('start_datetime', models.DateTimeField(verbose_name='Start Date & Time')),
                ('end_datetime', models.DateTimeField(verbose_name='End Date & Time')),
                ('rules', models.TextField(blank=True, null=True, verbose_name='Rules')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid?')),
                ('prize_details', models.TextField(blank=True, null=True, verbose_name='Prize Details')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active for Registration?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='competition_posters/%Y/%m/', verbose_name='Competition Poster')),
                ('price_per_participant', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True, verbose_name='Price per Participant (e.g., Toman)')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max Participants')),
            ],
            options={
                'verbose_name': 'Solo Competition',
                'verbose_name_plural': 'Solo Competitions',
            },
        ),
        migrations.CreateModel(
            name='SoloCompetitionRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending_payment', 'Pending Payment'), ('completed_or_free', 'Completed/Free'), ('payment_failed', 'Payment Failed'), ('cancelled', 'Cancelled')], default='pending_payment', max_length=20, verbose_name='Registration Status')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Solo Competition Registration',
                'verbose_name_plural': 'Solo Competition Registrations',
            },
        ),
        migrations.CreateModel(
            name='TeamContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='Content Description')),
                ('file_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='Link to External File/Repository')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Team Content Submission',
                'verbose_name_plural': 'Team Content Submissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('government_id_picture', models.ImageField(blank=True, null=True, upload_to='gov_ids/%Y/%m/', verbose_name='Government ID Picture')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Team Membership',
                'verbose_name_plural': 'Team Memberships',
                'ordering': ['team', 'user__email'],
            },
        ),
        migrations.CreateModel(
            name='ContentComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Comment Text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_comments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Content Comment',
                'verbose_name_plural': 'Content Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_likes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Content Like',
                'verbose_name_plural': 'Content Likes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupCompetition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Competition Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('start_datetime', models.DateTimeField(verbose_name='Start Date & Time')),
                ('end_datetime', models.DateTimeField(verbose_name='End Date & Time')),
                ('rules', models.TextField(blank=True, null=True, verbose_name='Rules')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid?')),
                ('prize_details', models.TextField(blank=True, null=True, verbose_name='Prize Details')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active for Registration?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='competition_posters/%Y/%m/', verbose_name='Competition Poster')),
                ('price_per_group', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True, verbose_name='Price per Group (e.g., Toman)')),
                ('min_group_size', models.PositiveIntegerField(default=1, verbose_name='Min Group Size')),
                ('max_group_size', models.PositiveIntegerField(verbose_name='Max Group Size')),
                ('max_teams', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max Teams')),
                ('requires_admin_approval', models.BooleanField(default=False, verbose_name='Requires Admin Approval for Teams?')),
                ('member_verification_instructions', models.TextField(blank=True, null=True, verbose_name='Member Verification Instructions')),
                ('allow_content_submission', models.BooleanField(default=False, verbose_name='Allow Teams to Submit Content?')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event', verbose_name='Parent Event')),
            ],
            options={
                'verbose_name': 'Group Competition',
                'verbose_name_plural': 'Group Competitions',
            },
        ),
        migrations.CreateModel(
            name='CompetitionTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Team Name')),
                ('status', models.CharField(choices=[('pending_admin_verification', 'Pending Admin Verification'), ('rejected_by_admin', 'Rejected by Admin'), ('approved_awaiting_payment', 'Approved - Awaiting Payment'), ('in_cart', 'In Cart (Awaiting Checkout)'), ('awaiting_payment_confirmation', 'Awaiting Payment Confirmation'), ('payment_failed', 'Payment Failed'), ('active', 'Active'), ('cancelled', 'Cancelled')], default='in_cart', max_length=40, verbose_name='Team Status')),
                ('is_approved_by_admin', models.BooleanField(default=False, verbose_name='Has Admin Approved?')),
                ('admin_remarks', models.TextField(blank=True, null=True, verbose_name='Admin Remarks')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_teams', to=settings.AUTH_USER_MODEL, verbose_name='Team Leader')),
                ('group_competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='events.groupcompetition', verbose_name='Parent Group Competition')),
            ],
            options={
                'verbose_name': 'Competition Team',
                'verbose_name_plural': 'Competition Teams',
                'ordering': ['-created_at', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Presentation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Presentation Title')),
                ('description', models.TextField(verbose_name='Presentation Description')),
                ('type', models.CharField(choices=[('talk', 'Talk'), ('workshop', 'Workshop')], default='talk', max_length=10, verbose_name='Type')),
                ('is_online', models.BooleanField(default=False, verbose_name='Is Online?')),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='Location (if offline)')),
                ('online_link', models.URLField(blank=True, null=True, verbose_name='Online Link (if online)')),
                ('start_time', models.DateTimeField(verbose_name='Start Time')),
                ('end_time', models.DateTimeField(verbose_name='End Time')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid?')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True, verbose_name='Price (e.g., Toman)')),
                ('capacity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Capacity')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presentations', to='events.event', verbose_name='Parent Event')),
            ],
            options={
                'verbose_name': 'Presentation',
                'verbose_name_plural': 'Presentations',
                'ordering': ['event', 'start_time', 'title'],
            },
        ),
    ]
